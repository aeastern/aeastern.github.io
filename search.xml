<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/19/hello-world/"/>
      <url>/2021/08/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>波兰式</title>
      <link href="/2021/08/19/%E6%B3%A2%E5%85%B0%E5%BC%8F/"/>
      <url>/2021/08/19/%E6%B3%A2%E5%85%B0%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="波兰式与逆波兰式"><a href="#波兰式与逆波兰式" class="headerlink" title="波兰式与逆波兰式"></a>波兰式与逆波兰式</h1><p>波兰式与逆波兰式都是一种运算表达式，我们常用的运算表达式其实被称为中缀表达式，这里的中缀的意思是运算符在数字中间，而如果运算符在数字前面则该表达式称为前缀表达式，又称为波兰式，与之类似，如果运算符在数字之后则该表达式称为逆波兰式。当然这里的在前面还是在后面不是随便放的，而是按照一定规律放的。在对表达式进行求值的时候通常是将中缀表达式转为后缀表达式，然后再利用后缀表达式进行求值，下面介绍具体方法</p><h2 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h2><p>1.从左到右进行遍历<br>2.运算数,直接输出.<br>3.左括号,直接压入堆栈,(括号是最高优先级,无需比较)(入栈后优先级降到最低,确保其他符号正常入栈)<br>4.右括号,(意味着括号已结束)不断弹出栈顶运算符并输出直到遇到左括号(弹出但不输出)<br>5.运算符,将该运算符与栈顶运算符进行比较,<br>如果优先级高于栈顶运算符则压入堆栈(该部分运算还不能进行),<br>如果优先级低于等于栈顶运算符则将栈顶运算符弹出并输出,然后比较新的栈顶运算符.<br>(低于弹出意味着前面部分可以运算,先输出的一定是高优先级运算符,等于弹出是因为同等优先级,从左到右运算)<br>直到优先级大于栈顶运算符或者栈空,再将该运算符入栈.<br>6.如果对象处理完毕,则按顺序弹出并输出栈中所有运算符.</p><p>例子：</p><p>以算术表达式2*(9+6/3-5)+9为例（注意标蓝的那几行是关键！）</p><p><img src="C:\Users\eastern\AppData\Roaming\Typora\typora-user-images\image-20210821120128851.png" alt="image-20210821120128851"></p><h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p>运算规则是：从左到右依次入栈,遇到运算符就弹出相应的两个运算数,运算后再把结果入栈.最终结果就是栈顶数的值.</p><p>以上面例子结果为例：    2 9 6 3 / + 5-*9+</p><p><img src="C:\Users\eastern\AppData\Roaming\Typora\typora-user-images\image-20210821122316650.png" alt="image-20210821122316650"></p><p>最终结果是21</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
